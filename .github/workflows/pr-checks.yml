name: PR Validation

on:
  pull_request:
    branches: [ main ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install dependencies
        run: uv sync

      - name: lint
        id: ruff-lint
        continue-on-error: true
        run: |
          LINT_OUTPUT=$(uvx ruff check 2>&1) || LINT_STATUS=$?

          echo "## Ruff Linter Results" >> $GITHUB_STEP_SUMMARY
          if [ -z "$LINT_STATUS" ]; then
            echo "✅ Ruff linting passed" >> $GITHUB_STEP_SUMMARY
            echo "No issues found." >> $GITHUB_STEP_SUMMARY
            echo "lint_failed=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Ruff linting failed" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$LINT_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "lint_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: format
        id: ruff-format
        continue-on-error: true
        run: |
          FORMAT_OUTPUT=$(uvx ruff format --check 2>&1) || FORMAT_STATUS=$?

          echo "## Ruff Format Results" >> $GITHUB_STEP_SUMMARY
          if [ -z "$FORMAT_STATUS" ]; then
            echo "✅ Ruff format check passed" >> $GITHUB_STEP_SUMMARY
            echo "All files formatted correctly." >> $GITHUB_STEP_SUMMARY
            echo "format_failed=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Ruff format check failed" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$FORMAT_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "format_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check if any step failed
        if: steps.ruff-lint.outputs.lint_failed == 'true' || steps.ruff-format.outputs.format_failed == 'true'
        run: |
          echo "::error::Linting or formatting checks failed"
          exit 1

  trivy-code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Export requirements.txt
        run: uv export -o src/requirements.txt --no-hashes

      - name: Run Trivy vulnerability scanner for Python code
        id: trivy-python
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './src/'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

      - name: Output Trivy Python scan results to Summary
        run: |
          echo "## Trivy Python Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.trivy-python.outcome }}" == "success" ]; then
            echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            echo "python_scan_failed=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.trivy-python.outputs.stdout || 'No detailed output available' }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "python_scan_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for Python code vulnerabilities
        if: steps.trivy-python.outcome == 'failure'
        run: |
          echo "::error::Trivy found security vulnerabilities in Python code"
          exit 1

  trivy-sam-template:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner for CloudFormation
        id: trivy-sam
        continue-on-error: true
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: './template.yaml'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: Output Trivy SAM scan results to Summary
        run: |
          echo "## Trivy SAM Template Scan Results" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.trivy-sam.outcome }}" == "success" ]; then
            echo "✅ No security vulnerabilities found in SAM template" >> $GITHUB_STEP_SUMMARY
            echo "sam_scan_failed=false" >> $GITHUB_OUTPUT
          else
            echo "❌ Security vulnerabilities detected in SAM template" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.trivy-sam.outputs.stdout || 'No detailed output available' }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "sam_scan_failed=true" >> $GITHUB_OUTPUT
          fi

      - name: Check for SAM template vulnerabilities
        if: steps.trivy-sam.outcome == 'failure'
        run: |
          echo "::error::Trivy found security vulnerabilities in SAM template"
          exit 1
